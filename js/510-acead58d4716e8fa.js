"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[510],{63345:function(e,t,r){r.d(t,{d:function(){return c},z:function(){return d}});var n=r(9579),a=r(82933),i=r(84488),o=r(67502),s=r(15865),l=r(15780);let c=(0,s.j)("focus-visible:ring-ring inline-flex items-center justify-center whitespace-nowrap rounded-sm text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90 shadow",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-sm",outline:"border-input bg-background hover:bg-accent hover:text-accent-foreground border shadow-sm",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-sm",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 px-3 text-xs",lg:"h-11 px-8",icon:"size-9","icon-sm":"size-6"}},defaultVariants:{variant:"default",size:"default"}}),d=a.forwardRef((e,t)=>{let{className:r,variant:a,size:s,asChild:d=!1,isLoading:u=!1,children:m,...f}=e,h=d?o.g7:"button";return d?(0,n.jsx)(h,{className:(0,l.cn)(c({variant:a,size:s,className:r})),ref:t,...f,children:m}):(0,n.jsxs)(h,{className:(0,l.cn)(c({variant:a,size:s,className:r})),ref:t,disabled:f.disabled||u,...f,children:[u&&(0,n.jsx)(i.$,{className:"mr-2 size-5 animate-spin"}),m]})});d.displayName="Button"},8767:function(e,t,r){r.d(t,{Ol:function(){return s},SZ:function(){return c},Zb:function(){return o},aY:function(){return d},eW:function(){return u},ll:function(){return l}});var n=r(9579),a=r(82933),i=r(15780);let o=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)("div",{ref:t,className:(0,i.cn)("bg-card text-card-foreground rounded-xl border",r),...a})});o.displayName="Card";let s=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)("div",{ref:t,className:(0,i.cn)("flex flex-col space-y-1.5 p-6",r),...a})});s.displayName="CardHeader";let l=a.forwardRef((e,t)=>{let{className:r,as:a="h3",...o}=e;return(0,n.jsx)(a,{ref:t,className:(0,i.cn)("font-semibold leading-tight tracking-tight",r),...o})});l.displayName="CardTitle";let c=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)("p",{ref:t,className:(0,i.cn)("text-foreground/50 text-sm",r),...a})});c.displayName="CardDescription";let d=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)("div",{ref:t,className:(0,i.cn)("p-6 pt-0",r),...a})});d.displayName="CardContent";let u=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)("div",{ref:t,className:(0,i.cn)("flex items-center p-6 pt-0",r),...a})});u.displayName="CardFooter"},79833:function(e,t,r){r.d(t,{$N:function(){return g},Be:function(){return p},GG:function(){return u},PK:function(){return d},Vq:function(){return l},cN:function(){return b},cZ:function(){return f},fK:function(){return h},hg:function(){return c},t9:function(){return m}});var n=r(9579),a=r(82933),i=r(11163),o=r(48101),s=r(15780);let l=o.fC,c=o.xz,d=o.h_,u=o.x8,m=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)(o.aV,{ref:t,className:(0,s.cn)("data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",r),...a})});m.displayName=o.aV.displayName;let f=a.forwardRef((e,t)=>{let{className:r,children:a,overlayClassName:l,closeButtonClassName:c,...u}=e;return(0,n.jsxs)(d,{children:[(0,n.jsx)(m,{className:(0,s.cn)(l)}),(0,n.jsxs)(o.VY,{ref:t,className:(0,s.cn)("bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg duration-200 sm:rounded-lg",r),...u,children:[a,(0,n.jsxs)(o.x8,{className:(0,s.cn)("ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute right-3 top-3 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none disabled:pointer-events-none",c),children:[(0,n.jsx)(i.X,{className:"size-4"}),(0,n.jsx)("span",{className:"sr-only",children:"Close"})]})]})]})});f.displayName=o.VY.displayName;let h=e=>{let{className:t,...r}=e;return(0,n.jsx)("div",{className:(0,s.cn)("flex flex-col space-y-1.5 text-center sm:text-left",t),...r})};h.displayName="DialogHeader";let b=e=>{let{className:t,...r}=e;return(0,n.jsx)("div",{className:(0,s.cn)("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",t),...r})};b.displayName="DialogFooter";let g=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)(o.Dx,{ref:t,className:(0,s.cn)("text-lg font-semibold leading-none tracking-tight",r),...a})});g.displayName=o.Dx.displayName;let p=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)(o.dk,{ref:t,className:(0,s.cn)("text-muted-foreground text-sm",r),...a})});p.displayName=o.dk.displayName},80097:function(e,t,r){r.r(t),r.d(t,{Drawer:function(){return s},DrawerClose:function(){return d},DrawerContent:function(){return m},DrawerDescription:function(){return g},DrawerFooter:function(){return h},DrawerHeader:function(){return f},DrawerOverlay:function(){return u},DrawerPortal:function(){return c},DrawerTitle:function(){return b},DrawerTrigger:function(){return l}});var n=r(9579),a=r(82933),i=r(67700),o=r(15780);let s=e=>{let{shouldScaleBackground:t=!0,...r}=e;return(0,n.jsx)(i.d.Root,{shouldScaleBackground:t,...r})};s.displayName="Drawer";let l=i.d.Trigger,c=i.d.Portal,d=i.d.Close,u=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)(i.d.Overlay,{ref:t,className:(0,o.cn)("fixed inset-0 z-50 bg-black/80",r),...a})});u.displayName=i.d.Overlay.displayName;let m=a.forwardRef((e,t)=>{let{className:r,children:a,showHandle:s=!0,...l}=e;return(0,n.jsxs)(c,{children:[(0,n.jsx)(u,{}),(0,n.jsxs)(i.d.Content,{ref:t,className:(0,o.cn)("bg-background fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border",r),...l,children:[s&&(0,n.jsx)("div",{className:"bg-muted mx-auto mt-4 h-2 w-[100px] rounded-full"}),a]})]})});m.displayName="DrawerContent";let f=e=>{let{className:t,...r}=e;return(0,n.jsx)("div",{className:(0,o.cn)("grid gap-1.5 p-4 text-center sm:text-left",t),...r})};f.displayName="DrawerHeader";let h=e=>{let{className:t,...r}=e;return(0,n.jsx)("div",{className:(0,o.cn)("mt-auto flex flex-col gap-2 p-4",t),...r})};h.displayName="DrawerFooter";let b=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)(i.d.Title,{ref:t,className:(0,o.cn)("text-lg font-semibold leading-none tracking-tight",r),...a})});b.displayName=i.d.Title.displayName;let g=a.forwardRef((e,t)=>{let{className:r,...a}=e;return(0,n.jsx)(i.d.Description,{ref:t,className:(0,o.cn)("text-muted-foreground text-sm",r),...a})});g.displayName=i.d.Description.displayName},29705:function(e,t,r){r.d(t,{a:function(){return a}});var n=r(82933);function a(e){let[t,r]=n.useState(!1);return n.useEffect(()=>{function t(e){r(e.matches)}let n=matchMedia(e);return n.addEventListener("change",t),r(n.matches),()=>n.removeEventListener("change",t)},[e]),t}},95569:function(e,t,r){r.d(t,{oY:function(){return m},Bq:function(){return o},vn:function(){return C}});var n,a,i,o,s=r(45688);let l=Object.values({GOOGLE:{EMAIL_SENDER:"google.email.sender",EMAIL_SUBJECT:"google.email.subject",EMAIL_BODY:"google.email.body",EMAIL_LABEL:"google.email.label"}}).flatMap(Object.values),c=Object.values({GMAIL:"gmail",UNAVAILABLE:"unavailable"});s.z.object({frequency_cron:s.z.string().optional().describe("A valid cron expression for the frequency user has referenced in UTC. If it's a single scheduled run, it should return null."),start_at:s.z.string().describe("Date the cron execution starts at in UTC, accurate down to the minute. It should represent the first starting time of the scheduled workflow. This value can not be before time now. If it is, then use the cron to determine the next logical execution start at."),end_at:s.z.string().optional().describe("Date the cron execution ends at in UTC, accurate down to the minute. It should represent the last time the scheduled workflow will run")});let d=s.z.object({conditionType:s.z.enum(l),conditionValue:s.z.string()});s.z.object({trigger:s.z.string().describe("Condition the trigger should activate based on"),conditions:s.z.array(d).describe("List of the condition type and its condition value pairs. If no conditions are required, then it should be an empty array"),service:s.z.enum(c).describe("The service which the condition is based on. If condition is not a gmail based condition, then the service is unavailable")}),s.z.object({condition_classified:s.z.boolean().describe("Indicates if the condition has been successfully classified."),action_classified:s.z.boolean().describe("Indicates if the action has been successfully classified.")});class u extends Error{constructor({name:e,errorStatus:t,message:r,cause:n}){super(r),this.name=e,this.errorStatus=t,this.cause=n}}class m extends u{constructor(e){e?super({name:"BadRequestError",errorStatus:400,message:e}):super({name:"BadRequestError",errorStatus:400,message:"Bad request failed to process"})}}Object.values({NO_URLS:"no_urls"}),Object.values({INVALID_FILE_NAME:"invalid_file_name",NO_FILE_NAMES_SPECIFIED:"no_file_names_specified",NOTION_NOT_INTEGRATED:"notion_not_integrated",GMAIL_NOT_INTEGRATED:"gmail_not_integrated"}),(n=i||(i={})).PlanBuilder="plan-builder",n.AutomationBuilder="automation-builder",n.Conversation="conversation",n.Intent="intent",n.Followup="followup",n.None="",n.GenerateChatName="name-chat",n.GenerateWoflowName="name-workflow";let f=s.z.object({filename:s.z.string()});s.z.object({name:s.z.string(),value:s.z.string()}),s.z.object({from:s.z.string(),subject:s.z.string(),text:s.z.string(),date:s.z.string(),attachments:s.z.array(f),labels:s.z.array(s.z.string()),emailId:s.z.string(),threadId:s.z.string().optional()}),s.z.object({maxResults:s.z.number().describe("The maximum number of emails to read. The absolute maximum is 20 emails at once"),emailId:s.z.string().optional().describe("The id of the email to read."),query:s.z.array(s.z.string().describe("The query to filter emails using Gmail search operators. A query can include more than one operator(s), and your goal is to have the least amount of queries that does the job.\n".concat("Gmail search operators allow you to refine your search queries and find specific emails quickly. By using these operators, you can filter emails by sender, recipient, date, and more. Here's how to use them effectively:\n\n- **Basic Identifiers**:\n- 'from:': Find emails from a specific sender.\n- Example: 'from:amy@example.com' finds emails from amy@example.com.\n- 'to:': Find emails sent to a specific recipient.\n- Example: 'to:david@example.com' finds emails sent to david@example.com.\n- 'cc:': Find emails with a specific recipient CC'd.\n- Example: 'cc:david@example.com' finds emails with david@example.com CC'd.\n\n- **Subject & Content**:\n- 'subject:': Search for words in the subject line. Use '-subject:' to exclude terms.\n- Example: 'subject:\"dinner\"' finds emails with \"dinner\" in the subject.\n- Exact phrases: Use double quotation marks to search for an exact phrase.\n- Example: '\"dinner and movie tonight\"' finds emails containing this exact phrase.\n\n- **Time-Related**:\n- 'after:', 'before:': Filter emails by the date sent. Use the day before for 'after:' and the day after for 'before:' to include the target date.\n- Example: 'after:2024-04-14 before:2023-04-18' finds emails sent on April 17, 2024.\n\n- **Read Status**:\n- 'is:read', 'is:unread': Filter emails by their read status.\n\n- **Exact Match**:\n- '+': Ensure a word is included exactly as typed.\n- Example: '+unicorn' includes emails with the word \"unicorn\".\n\n**Combining Operators**:\nYou can combine multiple operators to refine your search further. For example, to find emails from Bob about dinner sent between January 10 and 15, 2024, you could use: '(from:bob) after:2024-01-09 before:2024-01-16 \"dinner\"'.\n\nRemember, the goal is to use a single query that combines relevant keywords or phrases using the OR operator, along with any additional operators needed to find exactly what you need. Experiment with these operators to become proficient in finding any email quickly."))).describe("List of (min 1 and max 10) search queries based on the user prompt. Don't return search queries like '[from:bob, joe invitation, -learning]', combine them into one if you can.")}),s.z.array(s.z.object({from:s.z.string(),subject:s.z.string(),text:s.z.string(),id:s.z.string(),date:s.z.string(),attachments:s.z.array(f),labels:s.z.array(s.z.string())})).describe("An array of emails that are retrieved to be read"),s.z.object({emailIds:s.z.array(s.z.string()).describe("The ids of the emails to perform the action on"),applicableActions:s.z.string().describe("Comma separated actions to perform on the email. Options include: mark spam, mark_read, archive, star, important, or if its a custom label, the label name."),isBulk:s.z.boolean().describe("Whether the action needs to be applied to all emails at once, or one by one")}),s.z.object({label:s.z.string().optional().describe("Custom label specified by the user."),action:s.z.enum(["none","mark_read","mark_unread","mark_spam","archive","star","important","none"]).optional().describe("Predefined action to be performed on the email.")}).describe("Schema for managing email actions, including labeling and predefined actions."),s.z.object({emailsModified:s.z.number()}).describe("The number of emails that were modified"),s.z.object({to:s.z.string().describe("The recipient of the email"),subject:s.z.string().describe("The subject of the email, this should be the title or short summary of what your body is about")}),s.z.object({threadId:s.z.string().describe("The id of the thread to reply to")}),s.z.object({to:s.z.string(),subject:s.z.string(),body:s.z.string(),id:s.z.string().optional()}).describe("The newly drafted email"),s.z.object({maxEmails:s.z.number().describe("The maximum number of emails to label. The absolute maximum is 20 emails at once"),query:s.z.string().describe("The query to filter emails"),labelName:s.z.string().describe("Name of the label")}),s.z.array(s.z.object({from:s.z.string(),subject:s.z.string(),text:s.z.string(),id:s.z.string()})).describe("An array of emails that are were tagged"),s.z.object({query:s.z.string().describe("A detailed query generated from the user prompt including the target file names that are relevant to the request.\n".concat("Here are some examples to help you understand your task:\nExample 1:\nOriginal: Can you summarize my invoice\nResponse: Summarize my invoice file\n\nExample 2:\nOriginal: I have uploaded a file with name [\"file.pdf\"], please summarize it\nResponse: Summarize the file 'file.pdf' in detail \n\nExample 3:\nOriginal: I have shared with you the goo file, please help me understand the premise of the Green Goo from it\nResponse: From the 'goo' file, summarize the premise of the Green Goo\n\nDo not alter the original prompt's spellings and ensure every detail from the original prompt is included."))}),s.z.array(s.z.object({content:s.z.string().describe("The relevant context related to the query that can be used to answer it"),title:s.z.string().describe("The title of the file")}).describe("File result with content, and title."));let h=s.z.object({creation_date:s.z.string().optional(),source:s.z.string().optional(),file_path:s.z.string().optional(),last_accessed_date:s.z.string().optional(),last_modified_date:s.z.string().optional(),page_number:s.z.number().optional()});s.z.object({content:s.z.string(),metadata:h.optional()}),s.z.object({query:s.z.string().describe("The instructional query re-worded from the user prompt with explicit references to file names as part of the context. Do not alter the original prompt's spellings")}),s.z.array(s.z.object({content:s.z.string().describe("The relevant context related to the query that can be used to answer it"),title:s.z.string().describe("The title of the Notion document."),url:s.z.string().describe("The URL of the Notion document.")}).describe("Notion file result with content, URL, and title."));let b=s.z.object({url:s.z.string(),source:s.z.string(),page_id:s.z.string()});s.z.object({content:s.z.string(),metadata:b});let g='you must extract the desired content exactly as instructed and format the content. You must follow the following rule:\nYou will extract the content you\'re responsible of into a structured json. You are limited to the following content blocks:\n1. heading/subheading\n2. paragraph\n3. list\n\nYou can reference this example for how to structure your content:\n\n[\n  {\n    "type": "heading",\n    "level": 2,\n    "text": "Section Title"\n  },\n  {\n    "type": "paragraph",\n    "text": "This is a paragraph with some **bold** text and _italic_ text."\n  },\n  {\n    "type": "list",\n    "ordered": false,\n    "items": [\n      "List item 1",\n      "List item 2"\n    ]\n  }\n]\n',p=s.z.object({type:s.z.literal("heading"),level:s.z.number(),text:s.z.string()}),z=s.z.object({type:s.z.literal("paragraph"),text:s.z.string()}),y=s.z.object({type:s.z.literal("list"),ordered:s.z.boolean(),items:s.z.array(s.z.string())}),x=s.z.union([p,z,y]);s.z.object({database_query:s.z.string().describe("A query for a database within a users Notion. This can be the exact title or a keyword contained in the title. Do not try to guess. If you are unable to extract a guaranteed answer, leave as an empty string"),title:s.z.string().describe("a title for the new page to create"),content:s.z.array(x).describe("".concat(g))}),s.z.object({page_query:s.z.string().describe("A query for a page within a users Notion. This can be the exact title or a keyword contained in the title. Do not try to guess. If you are unable to extract a guaranteed answer, leave as an empty string"),content:s.z.array(x).describe("".concat(g))});let j={PAST_DAY:"Past day",PAST_WEEK:"Past week",PAST_MONTH:"Past month",PAST_YEAR:"Past year",ALL_TIME:"All time"},w="Used to filter search results by recency. Default value ".concat(j.ALL_TIME,". If the user prompt explicitly refers to a date or year, use ").concat(j.ALL_TIME,', otherwise if it\'s implicit determine relevant recency.\nFor example:\n- "Top games 2020" would use ').concat(j.ALL_TIME,' since time is explicit.\n- "trendng news" would use ').concat(j.PAST_WEEK," because no explicit date was mentioned and it's impllicit that they would want recent trending news.");s.z.object({queries:s.z.array(s.z.string()).describe("Search engine optimized queries based on the chat history. The number of queries must be AT LEAST 1 and AT MOST 5 queries"),recencyDays:s.z.enum(Object.values(j)).describe(w),searchType:s.z.enum(["search","news"]).optional().describe("Type of search to conduct.")}),s.z.array(s.z.string().describe("Summarized and ai answered response to users request. Uses another ai to read the content and summarize it."));let v=s.z.object({address:s.z.string().describe("A single complete address to find or display on a map")}),T=s.z.array(v).describe("An array of complete addresses to use to query geoCoding API");s.z.object({addresses:T}).describe("An object containing an array of addresses.");let N=s.z.object({lat:s.z.number(),long:s.z.number(),placeId:s.z.string()}).optional().describe("The latitude, logitude, and placeId from google map's geoCoding API");s.z.array(N).describe("An array of latitude, logitude, and placeId objects, retrieved from google map's geoCoding API");let E=s.z.object({textQuery:s.z.string().describe("A complete query that can be used to find places using google Maps API textSearch"),maxResultCount:s.z.number().min(1).max(20).describe("Specifies the maximum number of place results to return. Try to minimize max result count as much as possible")});s.z.object({locations:s.z.array(E)});let I=s.z.object({displayName:s.z.string().optional(),formattedAddress:s.z.string().optional(),location:s.z.object({latitude:s.z.number(),longitude:s.z.number()}),websiteUri:s.z.string().url().optional(),googleMapsUri:s.z.string().url().optional()}).describe("A single place object with details");s.z.array(I).describe("An array of place objects, each containing details like name, address, price level, and location"),s.z.union([s.z.literal("Past Day"),s.z.literal("Past Week"),s.z.literal("Past Month"),s.z.literal("Past Year")]),s.z.union([s.z.literal("search"),s.z.literal("news"),s.z.literal("places")]),s.z.union([s.z.literal("News"),s.z.literal("Papers")]),s.z.object({urls:s.z.string().array().describe("The HTTPS URL(s) extracted from the user prompt.\n".concat("You must convert all non-HTTPS urls to use HTTPS protocol. For example:\n- 'domain.com' should be converted to 'https://domain.com'\n- 'http//domain.com' should be converted to 'https://domain.com'"))}),s.z.array(s.z.object({source:s.z.string().describe("The URL of the source where the content was found."),content:s.z.string().describe("The content extracted from the source."),title:s.z.string().describe("The title of the source.")}).describe("Search result with source, content, and title. Only specify at MAX five urls."));let A=s.z.object({text:s.z.string().describe("The text of the primary multiple choice question. It should be short and concise."),type:s.z.enum(["multi"]).describe("The type of the primary question."),options:s.z.array(s.z.string()).describe("Options for the user to choose based on the primary question. When users select them, it must answer main question.")}),_=s.z.object({text:s.z.string().describe("The text of the primary short answer question."),type:s.z.enum(["short"]).describe("The type of the primary question.")}),q=s.z.object({text:s.z.string().describe("The text of the optional high-level secondary question.")});s.z.object({primaryQuestion:s.z.union([A,_]).describe("The mandatory primary clarifying question."),secondaryQuestion:q.optional().describe("An optional secondary clarifying question for additional context.")}),s.z.object({service:s.z.literal("email").describe("The service used to send the notification. Currently, only 'email' is supported.")}),s.z.object({status:s.z.union([s.z.literal("success"),s.z.literal("failure")]).describe("The status of the notification, indicating whether it was successful or not.")}),s.z.object({compileInstructions:s.z.string().describe("The instructions for the compilation. Includes the format, writing style, and other details relevant to the user prompt.")}),s.z.object({text:s.z.string().describe("The output of the compilation.")}),s.z.object({query:s.z.string().describe("Question that needs to be answered extracted from the user prompt, including the source target file(s) that contain the relevant information. Please do not modify any spellings.")}),s.z.array(s.z.object({content:s.z.string().describe("Content of the Google Drive file related to the query that can be used to answer it"),title:s.z.string().describe("Title of the Google Drive file")}));let D=s.z.object({source:s.z.string()});s.z.object({content:s.z.string(),metadata:D}),s.z.object({query:s.z.string()}),s.z.object({summary:s.z.string().describe("The summary or title of the event"),location:s.z.string().optional().describe("The location where the event will take place"),description:s.z.string().optional().describe("The description of the event"),startDateTime:s.z.string().describe("The start date and time of the event"),endDateTime:s.z.string().describe("The end date and time of the event"),attendees:s.z.array(s.z.object({email:s.z.string().describe("The email address of the attendee")})).optional().describe("A list of attendees")}),s.z.object({id:s.z.string(),summary:s.z.string(),startDateTime:s.z.string(),endDateTime:s.z.string(),attendees:s.z.array(s.z.object({email:s.z.string()})).optional()}),s.z.object({timeMin:s.z.string().describe("The minimum time to fetch events from, in ISO format"),timeMax:s.z.string().describe("The maximum time to fetch events to, in ISO format"),maxResults:s.z.number().optional().describe("The maximum number of events to return"),attendeeEmail:s.z.string().optional().describe("The email of the attendee to check RSVP status for"),attendeeDisplayName:s.z.string().optional().describe("The name of the attendee to identify in events")});let R=s.z.object({id:s.z.string(),summary:s.z.string(),location:s.z.string().optional(),description:s.z.string().optional(),start:s.z.object({dateTime:s.z.string(),timeZone:s.z.string().optional()}),end:s.z.object({dateTime:s.z.string(),timeZone:s.z.string().optional()}),attendees:s.z.array(s.z.object({email:s.z.string(),responseStatus:s.z.string().optional()})).optional()});s.z.array(R);let P=s.z.enum(["accepted","declined","tentative"]);s.z.object({eventId:s.z.string().describe("The ID of the calendar event"),response:P.describe("The RSVP response to the event")}),s.z.object({eventId:s.z.string(),summary:s.z.string(),startDateTime:s.z.string(),endDateTime:s.z.string(),responseStatus:P}),s.ZP.object({assistantInstructions:s.ZP.string()});let S={RESEARCHER:"researcher",GMAIL:"gmail",FILE:"file",NOTION:"notion",BROWSING:"browsing",MAP:"map",COMPILE:"compile",MESSAGE:"messages",GCAL:"gcal",GDRIVE:"gdrive"},C={[S.RESEARCHER]:"Web Research",[S.GMAIL]:"Gmail",[S.FILE]:"File",[S.NOTION]:"Notion",[S.BROWSING]:"Web Browsing",[S.MAP]:"Google Maps",[S.COMPILE]:"Writer",[S.MESSAGE]:"Messages",[S.GCAL]:"Google Calendar",[S.GDRIVE]:"Google Drive",trigger:"Trigger",questions:"Questions",writing:"Writing",scheduler:"Scheduler"};(a=o||(o={})).GMAIL="gmail",a.GOOGLE_DRIVE="gdrive",a.GOOGLE_CALENDAR="gcal";let L=s.z.object({auth_key:s.z.string(),type:s.z.enum(["notion","gdrive"]),overwrite:s.z.boolean().optional()}),k=s.z.object({content:s.z.string(),source:s.z.string(),type:s.z.literal("content"),overwrite:s.z.boolean().optional()}),O=s.z.object({source:s.z.string(),type:s.z.enum(["link","file"]),overwrite:s.z.boolean().optional()}),G=s.z.object({query:s.z.string(),type:s.z.literal("search"),overwrite:s.z.boolean().optional()}),M=s.z.discriminatedUnion("type",[k,O,G,L]);s.z.object({type:s.z.literal("aggregate")});let F=s.z.object({query:s.z.string()}),B=s.z.object({query_instructions:s.z.string().optional(),value_constraints:s.z.string().optional(),depends_on:s.z.string().array().default([]).optional()}),Z=s.z.record(B);s.z.object({user_id:s.z.string(),context:s.z.string().optional(),mode:s.z.enum(["aggregate","individual"]).default("individual"),schema:Z,data:M.array()}),s.z.object({schema:Z,data:F}),s.z.object({user_id:s.z.string(),context:s.z.string().optional(),schema:Z,data:M}),s.z.object({data:M,res:s.z.record(s.z.string())}),s.z.object({data:s.z.array(s.z.object({source:s.z.string(),overwrite:s.z.boolean().optional()})),userId:s.z.string(),contextKey:s.z.string().optional(),schema:Z,reportId:s.z.string()});let U=s.z.object({agents:s.z.array(s.z.string())}),V=s.z.object({perspectives:s.z.array(s.z.string())}),Y=s.z.object({outline:s.z.string()}),W=s.z.object({sections:s.z.array(s.z.string())}),H=s.z.object({body:s.z.string()}),K=s.z.object({insights:s.z.string()});s.z.union([U,V,Y,W,H,K]),s.ZP.object({content:s.ZP.string()}),s.ZP.object({keyTakeaways:s.ZP.string()});let Q=s.ZP.object({type:s.ZP.string(),from:s.ZP.string(),rowIndex:s.ZP.number()}),J=s.ZP.object({metadata:B,value:s.ZP.string(),columnIndex:s.ZP.number()});s.ZP.object({source:Q}).catchall(J)}}]);